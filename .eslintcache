[{"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/index.js":"1","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/App.js":"2","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/reportWebVitals.js":"3","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/SignUpPage/SignUpPage.js":"4","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/Navbar/Navbar.js":"5","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/LandingPage/LandingPage.js":"6","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/NotFoundPage/NotFoundPage.js":"7","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/ProfilePage/ProfilePage.js":"8","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/LoginPage/LoginPage.js":"9","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/Utils/StyledButton/StyledButton.js":"10","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/ProfileGrid/ProfileGrid.js":"11","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/services/token-service.js":"12","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/config.js":"13","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/UpdateForm/UpdateForm.js":"14","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/EmailConfirmation/EmailConfirmation.js":"15","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/contexts/ProfileContext.js":"16","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/services/CrewApiService.js":"17","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/UpdatePage/UpdatePage.js":"18","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/HobbyGrid/HobbyGrid.js":"19","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/InterestGrid/InterestGrid.js":"20","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/TeamGrid/TeamGrid.js":"21","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/Accordion/Accordion.js":"22"},{"size":705,"mtime":1610757439598,"results":"23","hashOfConfig":"24"},{"size":1892,"mtime":1610766213140,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1607279902804,"results":"26","hashOfConfig":"24"},{"size":3447,"mtime":1610924441996,"results":"27","hashOfConfig":"24"},{"size":709,"mtime":1607699948926,"results":"28","hashOfConfig":"24"},{"size":6524,"mtime":1611333861115,"results":"29","hashOfConfig":"24"},{"size":596,"mtime":1607701739258,"results":"30","hashOfConfig":"24"},{"size":3024,"mtime":1611074297730,"results":"31","hashOfConfig":"24"},{"size":1952,"mtime":1610924312071,"results":"32","hashOfConfig":"24"},{"size":325,"mtime":1607281201285,"results":"33","hashOfConfig":"24"},{"size":874,"mtime":1611073713773,"results":"34","hashOfConfig":"24"},{"size":431,"mtime":1607702346114,"results":"35","hashOfConfig":"24"},{"size":102,"mtime":1608519980607,"results":"36","hashOfConfig":"24"},{"size":16324,"mtime":1611074254022,"results":"37","hashOfConfig":"24"},{"size":1723,"mtime":1610760534781,"results":"38","hashOfConfig":"24"},{"size":3710,"mtime":1610759291571,"results":"39","hashOfConfig":"24"},{"size":7947,"mtime":1610765478935,"results":"40","hashOfConfig":"24"},{"size":5226,"mtime":1611074379831,"results":"41","hashOfConfig":"24"},{"size":3036,"mtime":1610852280657,"results":"42","hashOfConfig":"24"},{"size":3192,"mtime":1610852104146,"results":"43","hashOfConfig":"24"},{"size":5931,"mtime":1610850465145,"results":"44","hashOfConfig":"24"},{"size":731,"mtime":1610850490413,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"i6avq9",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/index.js",[],["96","97"],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/App.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/reportWebVitals.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/SignUpPage/SignUpPage.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/Navbar/Navbar.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/LandingPage/LandingPage.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/NotFoundPage/NotFoundPage.js",["98"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './NotFoundPage.css';\nimport StyledButton from '../Utils/StyledButton/StyledButton';\n\nexport default function NotFoundPage() {\n    return(\n        <div className='not-found'>\n            <h1>Something went wrong...</h1>\n            <p>The page you are looking for does not exist.</p>\n            <Link className='not-found-link' to={'/'}>Home</Link>\n            <Link className='not-found-link' to={'/login'}>Login</Link>\n            <Link className='not-found-link' to={'/register'}>Sign Up</Link>\n        </div>\n    )\n}","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/ProfilePage/ProfilePage.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/LoginPage/LoginPage.js",["99"],"import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './LoginPage.css';\nimport TokenService from '../../services/token-service';\nimport config from '../../config';\n\nexport default class LoginPage extends Component {\n    state = { \n        error: null \n    }\n\n    onLogin = (id) => {\n        this.props.history.push(`/user/${id}`)\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        const { email, password } = e.target\n        return fetch(`${config.API_ENDPOINT}/login`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json',\n            },\n            body: JSON.stringify({\n                email: email.value,\n                password: password.value,\n            })\n        })\n        .then(res => \n            (!res.ok)\n                ? res.json().then(err => Promise.reject(err))\n                : res.json()  \n        )\n        .then(res => {\n            email.value = ''\n            password.value = ''\n            TokenService.saveAuthToken(res.token)\n            this.onLogin(res.user.id)\n        })\n        .catch(res => {\n            this.setState({ error: res.error })\n        })\n    }\n\n    render() {\n        return(\n            <div className='login-page'>\n                <h1>Welcome Back</h1>\n                <form className='login-form' onSubmit={this.handleSubmit} >\n                    <input className='login-input' type='email' name='email' placeholder='Email'>\n                    </input>\n                    <input className='login-input' type='password' name='password' placeholder='Password'>\n                    </input>\n                <button type='submit' className='login-button'>Login</button>\n                </form>\n                <div className='navy-stripe'></div>\n                <div className='blue-stripe'></div>\n                <div className='red-stripe'></div>\n            </div>\n        )\n    }\n}","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/Utils/StyledButton/StyledButton.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/ProfileGrid/ProfileGrid.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/services/token-service.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/config.js",["100"],"export default {\n    API_ENDPOINT: 'http://localhost:8000',\n    TOKEN_KEY: 'crew-client-auth-token',\n}","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/UpdateForm/UpdateForm.js",["101","102","103","104","105"],"import React, { Component } from 'react';\nimport './UpdateForm.css';\nimport ProfileContext from '../../contexts/ProfileContext';\nimport CrewApiService from '../../services/CrewApiService';\n\nexport default class UpdateForm extends Component {\n    static contextType = ProfileContext\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            step: 1,\n            hobbySearchTerm: '',\n            hobbiesFiltered: [],\n            interestSearchTerm: '',\n            interestsFiltered: [],\n        }\n    }\n    \n    componentDidMount() {\n        const { userId } = this.props.match.params\n        this.context.clearError()\n        CrewApiService.getHobbies()\n            .then(res => Promise.all([\n                this.context.setAllHobbies(res.hobbies),\n                this.setState({\n                    hobbiesFiltered: res.hobbies\n                })\n            ]))\n            .catch(this.context.setError)\n        CrewApiService.getInterests()\n            .then(res => Promise.all([\n                this.context.setAllInterests(res.interests),\n                this.setState({\n                    interestsFiltered: res.interests\n                })\n            ]))\n            .catch(this.context.setError)\n        CrewApiService.getTeams()\n            .then(res => this.context.setAllTeams(res.teams))\n            .catch(this.context.setError)\n        CrewApiService.getUserHobbies(userId)\n            .then(res => Promise.all([\n                this.context.setUserHobbies(res.user_hobbies), \n                this.context.setUserHobbiesComp(res.user_hobbies)\n            ]))\n            .catch(this.context.setError)\n        CrewApiService.getUserInterests(userId)\n            .then(res => Promise.all([\n                this.context.setUserInterests(res.user_interests), \n                this.context.setUserInterestsComp(res.user_interests)\n            ]))\n            .catch(this.context.setError)\n        CrewApiService.getUserTeams(userId)\n            .then(res => Promise.all([\n                this.context.setUserTeams(res.user_teams), \n                this.context.setUserTeamsComp(res.user_teams)\n            ]))\n            .catch(this.context.setError)\n    }\n\n    handleNextPage = (e) => {\n        e.preventDefault()\n        if(this.state.step === 1) {\n            const newStep = this.state.step + 1\n            const stepOne = document.getElementById('step1')\n            const stepTwo = document.getElementById('step2')\n            stepOne.classList.add('hidden')\n            stepTwo.classList.remove('hidden')\n            this.setState({\n                step: newStep\n            })\n        }\n        else if (this.state.step === 2) {\n            const newStep = this.state.step + 1\n            const stepThree = document.getElementById('step3')\n            const stepTwo = document.getElementById('step2')\n            stepThree.classList.remove('hidden')\n            stepTwo.classList.add('hidden')\n            this.setState({\n                step: newStep\n            })\n        }\n    }\n\n    handlePrevPage = (e) => {\n        e.preventDefault()\n        if(this.state.step === 2) {\n            const newStep = this.state.step - 1\n            const stepOne = document.getElementById('step1')\n            const stepTwo = document.getElementById('step2')\n            stepOne.classList.remove('hidden')\n            stepTwo.classList.add('hidden')\n            this.setState({\n                step: newStep\n            })\n        }\n        else if (this.state.step === 3) {\n            const newStep = this.state.step - 1\n            const stepThree = document.getElementById('step3')\n            const stepTwo = document.getElementById('step2')\n            stepThree.classList.add('hidden')\n            stepTwo.classList.remove('hidden')\n            this.setState({\n                step: newStep\n            })\n        }\n    }\n\n    handleCheckInterest = (e) => {\n        const interestId = Number(e.target.value)\n        const interestObj = this.context.allInterests.find(interest => interest.id === interestId)\n        if(e.target.checked) {\n            this.context.setUserInterests([...this.context.userInterests, interestObj])\n        }\n        else {\n            const newInterests = this.context.userInterests.filter(interest => interest.id !== interestId)\n            this.context.setUserInterests(newInterests)\n        }\n    }\n\n    handleCheckHobby = (e) => {\n        const hobbyId = Number(e.target.value)\n        const hobbyObj = this.context.allHobbies.find(hobby => hobby.id === hobbyId)\n\n        if(e.target.checked) {\n            this.context.setUserHobbies([...this.context.userHobbies, hobbyObj])\n        }\n        else {\n            const newHobbies = this.context.userHobbies.filter(hobby => hobby.id !== hobbyId)\n            this.context.setUserHobbies(newHobbies)\n        }\n    }\n\n    handleCheckTeam = (e) => {\n        const teamId = Number(e.target.value)\n        const teamObj = this.context.allTeams.find(team => team.id === teamId)\n\n        if(e.target.checked) {\n            this.context.setUserTeams([...this.context.userTeams, teamObj])\n        }\n        else {\n            const newTeams = this.context.userTeams.filter(team => team.id !== teamId)\n            this.context.setUserTeams(newTeams)\n        }\n    }\n\n    handleChangeHobbySearchTerm = (e) => {\n        const hobbySearchTerm = e.target.value\n        const hobbiesFiltered = this.context.allHobbies.filter(hobby => {\n            return hobby.name.toLowerCase().includes(hobbySearchTerm.toLowerCase())\n        })\n        this.setState({ hobbySearchTerm })\n        this.setState({ hobbiesFiltered })\n    }\n\n    handleChangeInterestSearchTerm = (e) => {\n        const interestSearchTerm = e.target.value\n        const interestsFiltered = this.context.allInterests.filter(interest => {\n            return interest.name.toLowerCase().includes(interestSearchTerm.toLowerCase())\n        })\n        this.setState({ interestSearchTerm })\n        this.setState({ interestsFiltered })\n    }\n\n    onCompleteSubmit = (id) => {\n        this.props.history.push(`/user/${id}`)\n    }\n\n    handleSubmitInfo = (e) => {\n        e.preventDefault()\n        const { userId } = this.props.match.params\n        const userHobbies = this.context.userHobbies\n        const userInterests = this.context.userInterests\n        const userTeams = this.context.userTeams\n        const userHobbiesComp = this.context.userHobbiesComp\n        const userInterestsComp = this.context.userInterestsComp\n        const userTeamsComp = this.context.userTeamsComp\n\n        userHobbies.forEach(hobby => {\n            if(!userHobbiesComp.find(item => item.id === hobby.id)) {\n                CrewApiService.postHobby(hobby.id, userId)\n            }\n        })\n        userHobbiesComp.forEach(hobby => {\n            if(!userHobbies.find(item => item.id === hobby.id)) {\n                CrewApiService.deleteHobby(hobby.id, userId)\n            }\n        })\n        userInterests.forEach(interest => {\n            if(!userInterestsComp.find(item => item.id === interest.id)) {\n                CrewApiService.postInterest(interest.id, userId)\n            }\n        })\n        userInterestsComp.forEach(interest => {\n            if(!this.state.userInterests.find(item => item.id === interest.id)) {\n                CrewApiService.deleteInterest(interest.id, userId)\n            }\n        })\n        userTeams.forEach(team => {\n            if(!userTeamsComp.find(item => item.id === team.id)) {\n                CrewApiService.postTeam(team.id, userId)\n            }\n        })\n        userTeamsComp.forEach(team => {\n            if(!this.state.userTeams.find(item => item.id === team.id)) {\n                CrewApiService.deleteTeam(team.id, userId)\n            }\n        })\n        this.onCompleteSubmit(userId)\n    }\n\n    render() {\n        const checkedInterestList = this.context.userInterests.map(interest => interest.id)\n        const checkedHobbyList = this.context.userHobbies.map(hobby => hobby.id)\n        const checkedTeamList = this.context.userTeams.map(team => team.id)\n        const interestGridItems = this.state.interestsFiltered.map(interest => {\n            if(checkedInterestList.includes(interest.id)) {\n                return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckInterest} className='checkbox' name='interests' value={interest.id} type='checkbox' checked /><div className='check-label'><p>{interest.name}</p></div></label>\n                )\n            }\n            else {\n                return(\n                       <label className='form-grid-item'><input onChange={this.handleCheckInterest} className='checkbox' name='interests' value={interest.id} type='checkbox' /><div className='check-label'><p>{interest.name}</p></div></label>\n                )\n            }\n        }\n        )\n        const hobbyGridItems = this.state.hobbiesFiltered.map(hobby => {\n            if(checkedHobbyList.includes(hobby.id)) {\n                return(\n                    <label className='form-grid-item'><input onChange={this.handleCheckHobby} className='checkbox' name='hobbies' value={hobby.id} type='checkbox' checked /><div className='check-label'><p>{hobby.name}</p></div></label>\n                )\n            }\n            else {\n                return(\n                    <label className='form-grid-item'><input onChange={this.handleCheckHobby} className='checkbox' name='hobbies' value={hobby.id} type='checkbox' /><div className='check-label'><p>{hobby.name}</p></div></label>\n                )\n            }\n        }\n        )\n        const baseballGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'baseball') {\n                if(checkedTeamList.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const basketballGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'basketball') {\n                if(checkedTeamList.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const footballGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'football') {\n                if(checkedTeamList.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const hockeyGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'hockey') {\n                if(checkedTeamList.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const soccerGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'soccer') {\n                if(checkedTeamList.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        \n        return(\n            <div>\n                <form onSubmit={this.handleSubmitInfo}>\n                <div className='step1' id='step1'>\n                    <h1>Let's Get To Know you.</h1>\n                    <h2>What are you interested in?</h2>\n                    <p>Pick as many as you like. We’ll use these to match you up with other guys who like to discuss the same things.</p>\n                    <input className='text-input' value={this.state.interestSearchTerm} onChange={this.handleChangeInterestSearchTerm} placeholder='Search Interests...' />\n                    <div className='form-grid'>{interestGridItems}</div>\n                    <button className='next-button' onClick={this.handleNextPage}>Next: Hobbies</button>\n                </div>\n                <div className='step2 hidden' id='step2'>\n                    <h1>How About Hobbies?</h1>\n                    <h2>What do you like to do?</h2>\n                    <p>In our opinion, interests are things you like to discuss, while hobbies are activities you enjoy.</p>\n                    <input className='text-input' value={this.state.hobbySearchTerm} onChange={this.handleChangeHobbySearchTerm} placeholder='Search Hobbies...' />\n                    <div className='form-grid'>{hobbyGridItems}</div>\n                    <button className='next-button' onClick={this.handleNextPage}>Next: Teams</button>\n                </div>\n                <div className='step3 hidden' id='step3'>\n                    <h1>What Colors Do You Bleed?</h1>\n                    <h2>Which teams do you follow?</h2>\n                    <p>We saved the best for last, because nothing defines a man like the teams he roots for.</p>\n                    <h2>MLB</h2>\n                    <div className='form-grid'>{baseballGridItems}</div>\n                    <h2>NBA</h2>\n                    <div className='form-grid'>{basketballGridItems}</div>\n                    <h2>NFL</h2>\n                    <div className='form-grid'>{footballGridItems}</div>\n                    <h2>NHL</h2>\n                    <div className='form-grid'>{hockeyGridItems}</div>\n                    <h2>Association Football (Soccer)</h2>\n                    <div className='form-grid'>{soccerGridItems}</div>\n                    <button className='submit-button' type='submit'>Complete Profile</button>\n                </div>\n                </form>\n                <div className='horizontal-navy-update'></div>\n                <div className='horizontal-blue-update'></div>\n                <div className='horizontal-red-update'></div>\n            </div>\n        )\n    }\n}","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/EmailConfirmation/EmailConfirmation.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/contexts/ProfileContext.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/services/CrewApiService.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/UpdatePage/UpdatePage.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/HobbyGrid/HobbyGrid.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/InterestGrid/InterestGrid.js",[],"/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/TeamGrid/TeamGrid.js",["106","107","108","109","110"],"import React, { Component } from 'react';\nimport './TeamGrid.css';\nimport ProfileContext from '../../contexts/ProfileContext';\nimport CrewApiService from '../../services/CrewApiService';\nimport Accordion from '../Accordion/Accordion';\n\nexport default class TeamGrid extends Component {\n    static contextType = ProfileContext\n\n    componentDidMount() {\n        const userId = this.props.userId\n        CrewApiService.getTeams().then(res => this.context.setAllTeams(res.teams)).catch(this.context.setError)\n        CrewApiService.getUserTeams(userId).then(res => this.context.setUserTeams(res.user_teams)).catch(this.context.setError)\n    }\n\n    handleCheckTeam = (e) => {\n        const teamId = Number(e.target.value)\n        const teamObj = this.context.allTeams.find(team => team.id === teamId)\n\n        if(e.target.checked) {\n            this.context.setUserTeams([...this.context.userTeams, teamObj])\n        }\n        else {\n            const newTeams = this.context.userTeams.filter(team => team.id !== teamId)\n            this.context.setUserTeams(newTeams)\n        }\n    }\n\n    render() {\n        const userTeamIds = this.context.userTeams.map(team => team.id)\n        const baseballGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'baseball') {\n                if(userTeamIds.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const basketballGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'basketball') {\n                if(userTeamIds.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const footballGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'football') {\n                if(userTeamIds.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const hockeyGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'hockey') {\n                if(userTeamIds.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        const soccerGridItems = this.context.allTeams.map(team => {\n            if(team.sport === 'soccer') {\n                if(userTeamIds.includes(team.id)) {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' checked /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n                else {\n                    return(\n                        <label className='form-grid-item'><input onChange={this.handleCheckTeam} className='checkbox' name='teams' value={team.id} type='checkbox' /><div className='check-label'><p>{team.name}</p></div></label>\n                    )\n                }\n            }\n        }\n        )\n        return(\n            <div className='team-grid'>\n                <Accordion title='MLB'>\n                    {baseballGridItems}\n                </Accordion>\n                <Accordion title='NBA'>\n                    {basketballGridItems}\n                </Accordion>\n                <Accordion title='NFL'>\n                    {footballGridItems}\n                </Accordion>\n                <Accordion title='NHL'>\n                    {hockeyGridItems}\n                </Accordion>\n                <Accordion title='Association Football (Soccer)'>\n                    {soccerGridItems}\n                </Accordion>\n            </div>\n        )\n    }\n}","/Users/jeff/Desktop/madi-dev/BroGrow/bro-grow-client/src/components/Accordion/Accordion.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":20},{"ruleId":"115","severity":1,"message":"119","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":18},{"ruleId":"120","severity":1,"message":"121","line":1,"column":1,"nodeType":"122","endLine":4,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":243,"column":66,"nodeType":"125","messageId":"126","endLine":243,"endColumn":68},{"ruleId":"123","severity":1,"message":"124","line":258,"column":68,"nodeType":"125","messageId":"126","endLine":258,"endColumn":70},{"ruleId":"123","severity":1,"message":"124","line":273,"column":66,"nodeType":"125","messageId":"126","endLine":273,"endColumn":68},{"ruleId":"123","severity":1,"message":"124","line":288,"column":64,"nodeType":"125","messageId":"126","endLine":288,"endColumn":66},{"ruleId":"123","severity":1,"message":"124","line":303,"column":64,"nodeType":"125","messageId":"126","endLine":303,"endColumn":66},{"ruleId":"123","severity":1,"message":"124","line":31,"column":66,"nodeType":"125","messageId":"126","endLine":31,"endColumn":68},{"ruleId":"123","severity":1,"message":"124","line":46,"column":68,"nodeType":"125","messageId":"126","endLine":46,"endColumn":70},{"ruleId":"123","severity":1,"message":"124","line":61,"column":66,"nodeType":"125","messageId":"126","endLine":61,"endColumn":68},{"ruleId":"123","severity":1,"message":"124","line":76,"column":64,"nodeType":"125","messageId":"126","endLine":76,"endColumn":66},{"ruleId":"123","severity":1,"message":"124","line":91,"column":64,"nodeType":"125","messageId":"126","endLine":91,"endColumn":66},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'StyledButton' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]